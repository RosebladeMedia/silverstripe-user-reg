<?php

namespace Roseblade\UserReg\Page;

use SilverStripe\Control\Controller;
use SilverStripe\Core\Injector\Injector;
use SilverStripe\Forms\Form;
use SilverStripe\Forms\HiddenField;
use SilverStripe\Security\IdentityStore;
use SilverStripe\Security\Member;
use SilverStripe\Security\MemberAuthenticator\LoginHandler;
use SilverStripe\Security\MemberAuthenticator\LogoutHandler;
use SilverStripe\Security\MemberAuthenticator\MemberAuthenticator;
use SilverStripe\Security\Security;

class LoginPageController extends \PageController
{

	/**
	 * Current actions available to this controller
	 * index 		Used for registration form, or redirected to control panel if they're logged in
	 * confirm 		Used to confirm the user has signed up, and if needed, send the verification email
	 * verify 		Used for the user to verify their email address
	 * RegisterForm Used to generate the registration form
	 *
	 * @var array
	 */
	private static $allowed_actions = [
		"index",
		"logout",
		"LoginForm"
	];

	//--------------------------------------------------------------------------

	/**
	 * Perorm setup when this controller is initialised
	 *
	 * @return void
	 */
	public function init()
	{
		parent::init();
	}

	/**
	 * Get the link to this controller
	 * 
	 * @param string $action The URL endpoint for this controller
	 * 
	 * @return string
	 */
	public function Link($action = null)
	{
		return Controller::join_links(
			$this->config()->url_segment,
			$action
		);
	}

	public function index()
	{
		/** Check if the user is logged in already */
		$user 	= Security::getCurrentUser();

		if ($user)
		{
			$controller 	= AccountPage::get()->first();
			$redirectUrl 	= $controller->Link();

			$this->redirect($redirectUrl);
		}

		$this->customise([
			'Title'     => _t('Roseblade\UserReg.LOGIN', 'Login'),
			'MetaTitle' => _t('Roseblade\UserReg.LOGIN', 'Login'),
			'Form'      => $this->LoginForm(),
		]);

		$this->extend("updateIndexAction");

		return $this->render();
	}

	/**
	 * Login form, generated by the standard form class
	 * with customisation for users
	 *
	 * @return Form
	 */
	public function LoginForm(): Form
	{
		$MemberAuthenticator = new MemberAuthenticator;

		/** Set the form action to this controller/method */
		$loginHandler 	= new LoginHandler($this->request->getUrl(), $MemberAuthenticator);
		$form 			= $loginHandler->loginForm($this);

		$fields 		= $form->Fields();
		$backURLField	= $fields->fieldByName('BackURL');

		/** If there's no redirect field, we can specify the default here */
		if (empty($backURLField))
		{
			$fields->push($backURLField = HiddenField::create('BackURL', 'BackURL'));
		}

		/** If there's no back URL, set the default */
		$controller = AccountPage::get()->first();
		$redirectUrl = $controller->Link();

		if (empty($backURLField->Value()))
		{
			$backURLField->setValue($redirectUrl);
		}

		$this->extend('updateLoginForm', $form);

		return $form;
	}

	//--------------------------------------------------------------------------

	/**
	 * Logs out the current user and redirects to login page
	 *
	 * @return void
	 */
	public function logout()
	{
		$member 				= Security::getCurrentUser();

		if ($member instanceof Member)
		{
			Injector::inst()->get(IdentityStore::class)->logOut($this->getRequest());
		}

		return $this->redirect($this->Link());
	}
}
